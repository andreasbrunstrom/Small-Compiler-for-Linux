 %{
  #include <stdio.h>
  #include "global.h"
  extern int yylex();
  extern void yyerror(char*);
  #define MAX_ARGS 3

  enum Type {PLUS, MINUS, DIVI, MULTI, MODU, AND, OR, LT, GT, ASSIGN, IDS, NUMB, VILK, WHI, BRKT, EXPR, PRIN, REA, IFF, IFFX, STMT, STMT_LST};

  struct TreeNode {
  char type;
  int leaf_value;
  TreeNode* args[MAX_ARGS];
  TreeNode() {};
  
 };

 TreeNode* mkleaf(Type , int);
 TreeNode* mknode(Type, TreeNode* , TreeNode*  , TreeNode* );

void printtree1(TreeNode* p, int level) {
  if (p == 0) {
  }
  else if (p->type == IDS) {
    printf("%*s", 2*level, "");
    printf("%s\n", symtable[p->leaf_value].lexptr);
  }
  else if (p->type == NUMB) {
    printf("%*s", 2*level, "");
    printf("%d\n", p->leaf_value);
  }
  else if (p->type == PLUS) {
    printf("%*s", 2*level, "");
    printf("+\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == ';') {
    printf("%*s", 2*level, "");
    printtree1(p->args[0], level + 1);
    printf("%*s", 2*level, "");
    printf(";\n");
    printtree1(p->args[1], level);
  }
  else if (p->type == MINUS) {
	printf("%*s", 2*level, "");
    printf("-\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == MULTI) {
	printf("%*s", 2*level, "");
    printf("*\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == DIVI) {
	printf("%*s", 2*level, "");
    printf("/\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == MODU) {
	printf("%*s", 2*level, "");
    printf("%\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == AND) {
	printf("%*s", 2*level, "");
    printf("&\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == OR) {
	printf("%*s", 2*level, "");
    printf("|\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == LT) {
	printf("%*s", 2*level, "");
    printf("<\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == GT) {
	printf("%*s", 2*level, "");
    printf(">\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == VILK) {
	printf("%*s", 2*level, "");
    printf("?\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
	printtree1(p->args[2], level + 1);
  }
  else if (p->type == ASSIGN) {
	printf("%*s", 2*level, "");
    printf("=\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
	
  }
  else if (p->type == WHI) {
	printf("%*s", 2*level, "");
    printf("while\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
 else if (p->type == PRIN) {
	printf("%*s", 2*level, "");
    printf("print\n");
    printtree1(p->args[0], level + 1);
  }
 else if (p->type == REA) {
	printf("%*s", 2*level, "");
    printf("read\n");
    printtree1(p->args[0], level + 1);
  }
  else if (p->type == IFF) {
	printf("%*s", 2*level, "");
    printf("if\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
  }
  else if (p->type == IFFX) {
	printf("%*s", 2*level, "");
    printf("if..else\n");
    printtree1(p->args[0], level + 1);
    printtree1(p->args[1], level + 1);
	printtree1(p->args[2], level + 1);
  }
  else if(p->type == EXPR) {
	printtree1(p->args[0], level);
	printtree1(p->args[1], level);
	}

  else if(p->type == STMT) {
		printtree1(p->args[0], level);

   		if(p->args[1] != 0) {
			printtree1(p->args[1], level);
   		}
	}
else if(p->type == STMT_LST) {
		printtree1(p->args[0], level);
		printtree1(p->args[1], level);
	}
}



void printtree(TreeNode* p) {
  printf("Syntax tree:\n");
  printtree1(p, 0);
}


int calculate(TreeNode* p, int level) {
	if (p == 0) {
	}
	else if(p->type == PLUS) {
		return calculate(p->args[0], level +1) + calculate(p->args[1], level +1);
	}
	else if (p->type == MINUS) {
		return calculate(p->args[0], level + 1) - calculate(p->args[1], level + 1);
	}
	else if (p->type == IDS) {
		return symtable[p->leaf_value].value;
	}
	else if (p->type == NUMB) {
		return p->leaf_value;
	}
	else if (p->type == MULTI) {
		return calculate(p->args[0], level + 1) * calculate(p->args[1], level + 1);
	}
	else if (p->type == DIVI) {
		return calculate(p->args[0], level + 1) / calculate(p->args[1], level + 1);
	}
	else if (p->type == MODU) {
		return calculate(p->args[0], level + 1) % calculate(p->args[1], level + 1);
	}
	else if(p->type == AND) {
		return calculate(p->args[0], level + 1) & calculate(p->args[1], level + 1);
	}
	else if (p->type == OR) {
		return calculate(p->args[0], level + 1) | calculate(p->args[1], level + 1);
	}
	else if(p->type == LT) {
		return calculate(p->args[0], level + 1) < calculate(p->args[1], level + 1);
	}
	else if(p->type == GT) {
		return calculate(p->args[0], level + 1) > calculate(p->args[1], level + 1);
	}
	else if (p->type == ASSIGN) {
		int temp = calculate(p->args[1], level + 1);
		symtable[p->args[0]->leaf_value].value = temp;
		return temp;
	}
	else if (p->type == IFF) {
		if(calculate(p->args[0], level + 1)) {
			return calculate(p->args[1], level + 1);
		}
	}
	else if (p->type == IFFX) {
		if(calculate(p->args[0], level + 1)) {
			return calculate(p->args[1], level + 1);
		}
		else {
			return calculate(p->args[2], level + 1);
		}
	}
	else if(p->type == WHI)
	{
		int res = 0;
		while(calculate(p->args[0], level+1))
		{
		   res = calculate(p->args[1], level+1);
		}
		   return 0;
	}
	else if(p->type == PRIN)
	{
		int temp = calculate(p->args[0], level+1);
		printf("%d \n", temp);
		return temp;
		
			
	}

	else if(p->type == STMT) {
		calculate(p->args[0], level);
    	
		if(p->args[1] != 0) {
			calculate(p->args[1], level);
		} 
	}
	else if (p->type == REA) {
		int temp;
		scanf("%d", &temp);
		symtable[p->args[0]->leaf_value].value = temp;
		return temp;
	}

	else if(p->type == EXPR) {
		calculate(p->args[0],level);
		//calculate(p->args[1],level);	
	}
	else if(p->type == STMT_LST) {
		calculate(p->args[0], level);
		calculate(p->args[1], level);
	}
}

void calculate1(TreeNode* p) {
  printf("Running Program:\n");
  calculate(p, 0);
}

%}

%union {
  struct TreeNode* p;
  int n;
}


%type <p> expr;
%type <p> list;
%type <p> assignment;
%type <p> variable;
%type <p> stmt;
%type <p> print;
%type <p> read;
%type <p> while;
%type <p> if
%type <p> block
%type <p> stmt_list
%type <p> expr_stmt


%type <n> ID;
%type <n> NUM;

%token DONE ID NUM DIV MOD WHILE PRINT READ IF ELSE IFX 

%nonassoc IF
%nonassoc IFX
%right '='
%left '?'
%left  '|'
%left '&'
%nonassoc '<' '>'
%left '+' '-'
%left '*' '/' '%'
%%



start: stmt_list DONE { calculate1($1); /*printtree($1);*/ }
        ;

stmt_list: stmt stmt_list { $$ = mknode(STMT_LST, $1, $2, 0); }
	| { $$ = NULL; } /* Empty */
	;

expr_stmt: expr ';' { $$ = mknode(EXPR, $1, 0, 0); } 
	;
        

stmt: expr_stmt | if | block | while | print | read { $$ = mknode(STMT, $1, 0, 0);  }
	;    
	 
	 
if:  IF '(' expr ')' stmt { $$ = mknode(IFF, $3, $5, 0); }
     | IF '(' expr ')' stmt ELSE stmt { $$ = mknode(IFFX, $3, $5, $7); }
	;

block: '{' stmt_list '}' { $$ = $2; }
	;
while: WHILE '(' expr ')' stmt { $$ = mknode(WHI, $3, $5, 0);}
	;
read: READ '(' variable ')' ';' { $$ = mknode(REA, $3, 0, 0); }
	;
print: PRINT '(' variable ')' ';'  { $$ = mknode(PRIN, $3, 0, 0); }
	;

//assignment: variable '=' expr { $$ = mknode(ASSIGN, $1, $3, 0);}
//	;

	
expr:    expr '+' expr { $$ = mknode(PLUS, $1, $3, 0); }
       | expr '-' expr { $$ = mknode(MINUS, $1, $3, 0); }
       | expr '*' expr { $$ = mknode(MULTI, $1, $3, 0); }
       | expr '/' expr { $$ = mknode(DIVI, $1, $3, 0); }
       | expr '%' expr { $$ = mknode(MODU, $1, $3, 0); }
       | expr '&' expr { $$ = mknode(AND, $1, $3, 0); }
       | expr '|' expr { $$ = mknode(OR, $1, $3, 0); }
       | expr '<' expr { $$ = mknode(LT, $1, $3, 0); }
       | expr '>' expr { $$ = mknode(GT, $1, $3, 0); }
       | expr '?' expr ':' expr { $$ = mknode(VILK, $1, $3, $5); }
       | '(' expr ')' { $$ = $2; }
       | NUM { $$ = mkleaf(NUMB, $1); }
       | variable //ID { $$ =  mkleaf(IDS, $1);}
	 |variable '=' expr { $$ = mknode(ASSIGN, $1, $3, 0);}
       ;

variable: ID { $$ = mkleaf(IDS, $1);}
%%

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

void parse() {
  yyparse();
} 

TreeNode* mkleaf(Type type, int value) {
  TreeNode* p = new TreeNode();
  p->type = type;
  p->leaf_value = value;
  return p;
}

TreeNode* mknode(Type type, TreeNode* a0 = 0, TreeNode* a1 = 0, TreeNode* a2 = 0) {
  TreeNode* p = new TreeNode();
  p->type = type;
  p->args[0] = a0;
  p->args[1] = a1;
  p->args[2] = a2;
  return p;
}
